#!/usr/bin/env bash

GCS="100.64.0.1"
GST="100.64.0.5"

tblk='\e[0;30m' # Black - Regular
tred='\e[0;31m' # Red
tgrn='\e[0;32m' # Green
tylw='\e[0;33m' # Yellow
tblu='\e[0;34m' # Blue
tpur='\e[0;35m' # Purple
tcyn='\e[0;36m' # Cyan
twht='\e[0;37m' # White
rst='\e[0m'     # Text Reset

print_help() {
    echo -e $tcyn"AEAC AUTO LAUNCHER"$rst
    echo "Helper script to create a tmux session and run required setup scripts."
    echo "Interactive mode allows setting params and customizing launch"
    echo ""
    echo "run \"aeac -i\" for interactive mode"
    echo ""
    echo "ARGS:"
    echo "-a AUTO       Auto launch using a preset mode"
    echo "-i            Interactive mode"
    echo "-h            This message"
    echo ""
    echo "AUTO:"
    echo "[m]avros, [i]r, [b]ucket, [c]amera, i[r] camera"
    exit 0
}

wait_for_tmux() {
    while true; do
        TMUXSESSIONS=$(tmux list-sessions 2>&1)
        if [[ ! $TMUXSESSIONS =~ ^no ]]; then
            sleep 0.1
            break
        fi
        sleep 0.1
    done
}

print_message() {
    tmux send-keys -t "0:flight-stack" "echo -e \"\e[0;34m$1\e[0m\""
    tmux send-keys -t "0:flight-stack" "ENTER"
}

print_ready() {
    tmux send-keys -t "0:flight-stack" "echo -e \"\e[0;32mSETUP COMPLETE\e[0m\""
    tmux send-keys -t "0:flight-stack" "ENTER"
}

mavros_launch() {
    wait_for_tmux
    tmux new-window
    tmux rename-window -t "0:0" roslaunch
    tmux rename-window -t "0:1" flight-stack

    tmux send-keys -t "0:0" "roslaunch simulation_testing mavros.launch gcs_url:=udp://:14551@$GCS:14550"
    tmux send-keys -t "0:0" "ENTER"
}

camera_launch() {
    wait_for_tmux
    tmux new-window
    tmux new-window
    tmux rename-window -t "0:0" luxonis
    tmux rename-window -t "0:1" roslaunch
    sleep 1

    print_message "running luxonis bridge..."
    tmux send-keys -t "0:0" "OAK"
    tmux send-keys -t "0:0" "ENTER"
    sleep 3
    print_message "running roslaunch..."
    tmux send-keys -t "0:1" "roslaunch simulation_testing real_cam.launch gcs_url:=udp://:14551@$GCS:14550 gst_ip:=$GST"
    tmux send-keys -t "0:1" "ENTER"
    sleep 3
    print_ready
}

ir_camera_launch() {
    wait_for_tmux
    tmux new-window
    tmux rename-window -t "0:0" roslaunch
    sleep 1

    print_message "running roslaunch..."
    tmux send-keys -t "0:0" "roslaunch simulation_testing real_ir.launch gcs_url:=udp://:14551@$GCS:14550 gst_ip:=$GST"
    tmux send-keys -t "0:0" "ENTER"
    sleep 3
    print_ready
}

ir_launch() {
    wait_for_tmux
    tmux new-window
    tmux new-window
    tmux rename-window -t "0:0" roslaunch
    tmux rename-window -t "0:1" cv-model
    tmux rename-window -t "0:2" flight-stack
    sleep 1

    print_message "running roslaunch..."
    tmux send-keys -t "0:0" "roslaunch simulation_testing real_ir.launch gcs_url:=udp://:14551@$GCS:14550 gst_ip:=$GST"
    tmux send-keys -t "0:0" "ENTER"
    sleep 3
    print_message "initializing cv model..."
    tmux send-keys -t "0:1" "rosrun computer_vision ir_detector.py"
    tmux send-keys -t "0:1" "ENTER"
    sleep 3
    print_ready
    tmux send-keys -t "0:1" "rosrun simulation_testing test_task1.py"
}

bucket_launch() {
    wait_for_tmux
    tmux new-window
    tmux new-window
    tmux new-window
    tmux new-window
    tmux rename-window -t "0:0" luxonis
    tmux rename-window -t "0:1" roslaunch
    tmux rename-window -t "0:2" payload
    tmux rename-window -t "0:3" cv-model
    tmux rename-window -t "0:4" flight-stack
    sleep 1

    print_message "running luxonis bridge..."
    tmux send-keys -t "0:0" "OAK"
    tmux send-keys -t "0:0" "ENTER"
    sleep 3
    print_message "running roslaunch..."
    tmux send-keys -t "0:1" "roslaunch simulation_testing real_cam.launch gcs_url:=udp://:14551@$GCS:14550 gst_ip:=$GST"
    tmux send-keys -t "0:1" "ENTER"
    sleep 3
    print_message "running rosserial..."
    tmux send-keys -t "0:2" "rosrun rosserial_python serial_node.py _port:=/dev/payload_serial _baud:=115200"
    tmux send-keys -t "0:2" "ENTER"
    print_message "initializing cv model..."
    tmux send-keys -t "0:3" "rosrun computer_vision bucket_detector.py"
    tmux send-keys -t "0:3" "ENTER"
    sleep 3
    print_ready
    tmux send-keys -t "0:4" "rosrun simulation_testing test_"
}

auto_launch() {
    case ${1} in
    m)
        mavros_launch &
        tmux
        exit 0
        ;;
    i)
        ir_launch &
        tmux
        exit 0
        ;;
    b)
        bucket_launch &
        tmux
        exit 0
        ;;
    c)
        camera_launch &
        tmux
        exit 0
        ;;
    r)
        ir_camera_launch &
        tmux
        exit 0
        ;;
    esac
    echo -e $tred"Auto launch option \"${1}\" not found"$rst
}

ip_input() {
    gcs_temp="input"
    while true; do
        read -p "gcs_url (default $GCS): " gcs_temp
        if [[ -z $gcs_temp ]]; then
            break
        fi
        if [[ $gcs_temp =~ ^[0-9]{3}\.[0-9]{2}\.[0-9]{1}\.[0-9]{1}$ ]]; then
            GCS=$gcs_temp
            break
        fi
        echo -e $tred"invalid input"$rst
    done

    gst_temp="input"
    while true; do
        read -p "gst_url (default $GST): " gst_temp
        if [[ -z $gst_temp ]]; then
            break
        fi
        if [[ $gst_temp =~ ^[0-9]{3}\.[0-9]{2}\.[0-9]{1}\.[0-9]{1}$ ]]; then
            GST=$gst_temp
            break
        fi
        echo -e $tred"invalid input"$rst
    done
}

auto_select() {
    auto="input"
    while true; do
        echo "mavros [m]"
        echo "ir:    [i]"
        echo "bucket [b]"
        echo "camera [c]"
        echo "ir cam [r]"
        read -p "> " auto
        if [[ $auto =~ ^[mibcr]{1}$ ]]; then
            break
        fi
        echo -e $tred"invalid input"$rst
    done

    ip_input

    auto_launch $auto
}

interactive_mode() {

    echo -e $tgrn"AEAC AUTO LAUNCHER"$rst

    # template
    # VARNAME="input"
    # while true; do
    #     read -p "" VARNAME
    #     if [[ $VARNAME =~ ^$ ]]; then
    #         break
    #     fi
    #     echo -e $tred"invalid input"$rst
    # done

    flightstack="input"
    while true; do
        echo "Full custom launch: WIP [1]"
        echo "Launch MAVROS:          [2]"
        echo " ∟ with custom params      "
        echo "Launch auto launcher:   [3]"
        echo " ∟ with custom params      "
        read -p "> " flightstack
        if [[ $flightstack =~ ^1$ ]]; then
            break
        fi
        if [[ $flightstack =~ ^2$ ]]; then
            echo -e $tgrn"MAVROS Launcher"$rst
            ip_input
            mavros_launch &
            tmux
            exit 0
        fi
        if [[ $flightstack =~ ^3$ ]]; then
            auto_select
        fi
        echo -e $tred"invalid input"$rst
    done

    # TODO other input types
    # move auto launcher parts to functions to allow interactive selector to choose what runs

    camera="input"
    while true; do
        read -p "Luxonis [l], IR [i], None [n]: " camera
        if [[ $camera =~ ^[lin]{1}$ ]]; then
            break
        fi
        echo -e $tred"invalid input"$rst
    done

    echo $camera
    exit 0
}

if [[ ! -z $TMUX ]]; then
    echo -e $tred"Running inside a tmux session forbidden"$rst
    exit 1
fi

TMUXSESSIONS=$(tmux list-sessions 2>&1)
if [[ ! $TMUXSESSIONS =~ ^no && ! $TMUXSESSIONS =~ ^error ]]; then
    echo -e $tred"Running script with existing tmux sessions not supported"$rst
    exit 1
fi

if [ "$#" -eq 0 ]; then
    print_help
    exit 0
fi

# TODO parser for params like --gst instead of having to use auto selector
# probably switch to getopt because we don't need cross platform

while getopts a:hi opts; do
    case ${opts} in
    i) interactive_mode ;;
    a) auto_launch $OPTARG ;;
    h) print_help ;;
    esac
done
